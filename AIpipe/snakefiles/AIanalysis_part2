#!/usr/bin/env python3

import pandas as pd
import os, re

## Load config file
configfile: "config/config_AIanalysis.yaml"

## Read in RNA-seq samplesheet
samples = pd.read_csv(config["samplesheet"],sep=",")

## Convert samplesheet columns to strings
samples = samples.astype(str)

## Concatenate Sequencing_Directory to Read1 and Read2 for full read paths
samples['Read1'] = samples[['Sequencing_Directory', 'Read1']].apply(lambda row: os.path.join(*row), axis=1)
samples['Read2'] = samples[['Sequencing_Directory', 'Read2']].apply(lambda row: os.path.join(*row), axis=1)

## Group Seq_Reps
samples['id'] = samples[['Proj', 'Donor']].agg('_'.join, axis=1) + '_R_' + samples[['Condition', 'Time', 'Tech_Rep']].agg('_'.join, axis=1)

onsuccess:
    print("Allelic imbalance analysis (part 2) workflow finished successfully!")

rule all:
    input:
        'output/AI/differentialAllelicImbalance.rda',
        'output/AI/AI_variants.txt'
        'output/AI/RNAhets_' + str(config['minTotalAlleleCounts']) + '_' + str(config['minAlleleCounts']) + '.csv',
        'output/AI/alleleCountsMatrix_filtered_' + config['minHets'] '.txt',
        'output/AI/weightMatrix.txt',
        'output/AI/agreementReport.txt',

rule getRNAHets:
    input:
        'output/AI/alleleCountsMatrix.txt'
    output:
        'output/AI/RNAhets_' + str(config['minTotalAlleleCounts']) + '_' + str(config['minAlleleCounts']) + '.csv'
    params:
        donors = ",".join(samples['Donor'].unique().tolist()),
        minTotalAlleleCounts = config['minTotalAlleleCounts'],
        minAlleleCounts = config['minAlleleCounts']
    log:
        out = "output/AI/logs/rnaHets.out"
    shell:
        """ 
        python3 scripts/rnaHets.py {input} {params.donors} {params.minTotalAlleleCounts} {params.minAlleleCounts} 1> {log.out}
        """
         
rule reportAgreement:
    input:
        rna = rules.getRNAHets.output,
        geno = 'output/AI/genohets.csv'
    output:
        'output/AI/agreementReport.txt'
    shell:
        """
        python3 scripts/checkAgreement.py {input.geno} {input.rna} 1> {output}
        """

rule checkConcordance:
    input:
        rna = rules.getRNAhets.output,
        geno = 'output/AI/genohets.csv'
    output:
        temp('output/AI/removeVariants.csv')
    log:
        out = "output/AI/logs/checkConcordance.out"
    params: 
        minHets = config['minHets']
    threads: 4
    shell:
        """
        # joblib module needs this version of python3
        module load python/3.9.6
        python3 scripts/checkConcordance.py {input.geno} {input.rna} {params.minHets} 1> {log.out}
        """

rule filterVariants:
    input:
        matrix = 'output/AI/alleleCountsMatrix.txt',
        filter = rules.checkConcordance.output,
        rna = rules.getRNAHets.output
    output:
        'output/AI/alleleCountsMatrix_filtered_' + config['minHets'] '.txt',
        temp('output/AI/RNAhets_filtered.txt')
    params:
        minHets = config['minHets']
    log:
        out = 'output/AI/logs/filterVariants.out'
    shell:
        """
        module load r/4.1.0
        Rscript scripts/filterVariants.r {input.matrix} {input.filter} {input.rna} {params.minHets} 1> {log.out}
        """

rule buildWeightsMatrix:
    input:
        matrix = 'output/AI/alleleCountsMatrix_filtered.txt',
        hets = 'output/AI/RNAhets_filtered.txt'
    output:
        'output/AI/weightMatrix.txt'
    log:
        out = 'output/AI/logs/buildWeightsMatrix.out'
    params:
        weightVal = config['weightVal']
    threads: 4
    shell:
        """
        module load python/3.9.6
        python3 scripts/buildWeightsMatrix.py {input.matrix} {input.hets} {params.weightVal} 1> {log.out}
        """

rule runDifferentialAnalysis:
    input:
        counts = 'output/AI/alleleCountsMatrix_filtered.txt',
        colData = 'output/AI/colData.txt',
        weights = 'output/AI/weightMatrix.txt'
    output:
        temp('output/AI/differentialAllelicImbalance_v1.rda'),
        temp('output/AI/AI_variant_positions.txt')
    log:
        out = 'output/AI/logs/differentialAnalysis.out'
    params:
        weightVal = config['weightVal']
    shell:
        """
        module load r/4.1.3
        Rscript scripts/differentialAnalysis.r {input.counts} {input.colData} {input.weights} 1> {log.out}
        """

rule getRsids:
    input:
        'output/AI/AI_variant_positions.txt'
    output:
        'output/AI/AI_variants.txt'
    log:
        out = 'output/AI/logs/getRsids.out'
    params:
        dbsnp = config['dbsnp']
    shell:
        """
        module load python/3.9.6
        python3 scripts/posToRsids.py {input} {params.dbsnp} {output} 1> {log.out}
        """

rule updateDds:
    input:
        dds = 'output/AI/differentialAllelicImbalance_v1.rda',
        rsids = rules.getRsids.output
    output:
        'output/AI/differentialAllelicImbalance.rda'
    log:
        out = 'output/AI/logs/updateDds.out'
    shell:
        """
        module load r/4.1.3
        Rscript scripts/updateDds.r {input.dds} {input.rsids} 1> {log.out}
        """