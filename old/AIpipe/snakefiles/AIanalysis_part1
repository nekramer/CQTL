#!/usr/bin/env python3

import pandas as pd
import os, re

## Load config file
configfile: "config/config_AIanalysis.yaml"

## Read in RNA-seq samplesheet
samples = pd.read_csv(config["samplesheet"],sep=",")

## Convert samplesheet columns to strings
samples = samples.astype(str)

## Concatenate Sequencing_Directory to Read1 and Read2 for full read paths
samples['Read1'] = samples[['Sequencing_Directory', 'Read1']].apply(lambda row: os.path.join(*row), axis=1)
samples['Read2'] = samples[['Sequencing_Directory', 'Read2']].apply(lambda row: os.path.join(*row), axis=1)

## Group Seq_Reps
samples['id'] = samples[['Proj', 'Donor']].agg('_'.join, axis=1) + '_R_' + samples[['Condition', 'Time', 'Tech_Rep']].agg('_'.join, axis=1)

## Extract grouped read1 and read2s
read1 = samples.groupby(['id'])['Read1'].apply(list).to_dict()
read2 = samples.groupby(['id'])['Read2'].apply(list).to_dict()

## Get vcf file path and prefix of VCFproc processed vcf from config file
vcf = config['vcf']
vcf_file = os.path.basename(vcf)
vcf_prefix = vcf_file[:re.search("_nodups_biallelic.vcf.gz", vcf_file).span()[0]]

onsuccess:
    print("Allelic imbalance analysis (part 1) workflow finished successfully!")

rule all:
    input:
        'output/vcf/' + vcf_prefix + '_nodups_biallelic_AI.recode.vcf.gz',
        'output/vcf/' + vcf_prefix + '_nodups_biallelic_AI.recode.vcf.gz.tbi',
        'output/AI/alleleCountsMatrix.txt',
        'output/AI/colData.txt',
        'output/AI/genohets.csv'

rule overlapVariants:
    input:
        [expand("output/{group}/alleleCounts/{group}_alleleCounts.csv", group = key) for key in read1]
    output:
        #[expand("output/{group}/alleleCounts/{group}_commonCounts.csv", group = key) for key in read1],
        #"output/vcf/commonSnps.txt"
        "alleleCount_stats.txt"
    threads: 4
    log:
        out = "output/vcf/logs/overlapVariants.out"
    shell:
        """
        module load r/4.2.1
        Rscript scripts/overlapVariants.r {input} 1> {log.out}
        """

rule VCFoverlapSamples:
    input:
        'output/vcf/' + vcf_prefix + '_nodups_biallelic.vcf.gz',
    output:
        temp('output/vcf/AIsamples.txt'),
        temp('output/vcf/' + vcf_prefix + '_nodups_biallelic_samples.vcf.gz')
    params:
        donors = ",".join(samples['Donor'].unique().tolist()),
        donorConversions = 'donors.txt',
        prefix = vcf_prefix
    threads: 4
    log:
        err = "output/vcf/logs/removeDuplicates.err"
    shell:
        """
        module load r/4.1.0
        Rscript scripts/convertDonors.r {params.donors} {params.donorConversions}

        module load samtools
        bcftools view -S output/vcf/AIsamples.txt --threads {threads} -o output/vcf/{params.prefix}_nodups_biallelic_samples.vcf {input} 2> {log.err}
        
        bgzip output/vcf/{params.prefix}_nodups_biallelic_samples.vcf
        """

rule VCFoverlapVariants:
    input:
        vcf = 'output/vcf/' + vcf_prefix + '_nodups_biallelic_samples.vcf.gz',
        snps = "output/vcf/commonSnps.txt"
    output:
        "output/vcf/" + vcf_prefix + "_nodups_biallelic_AI.recode.vcf.gz"
    params:
        prefix = "output/vcf/" + vcf_prefix + "_nodups_biallelic_AI"
    shell:
        """
        module load vcftools
        module load samtools
        vcftools --gzvcf {input.vcf} --snps {input.snps} --recode --recode-INFO-all --out {params.prefix}
        bgzip {params.prefix}.recode.vcf   
        """

rule VCFoverlapVariantsIndex:
    input:
        rules.VCFoverlapVariants.output
    output:
        "output/vcf/" + vcf_prefix + "_nodups_biallelic_AI.recode.vcf.gz.tbi"
    log:
        out = "output/vcf/logs/overlapVariantsIndex.out",
        err = "output/vcf/logs/overlapVariantsIndex.err"
    shell:
        """
        module load gatk/4.1.7.0
        gatk IndexFeatureFile -I {input} 2> {log.err} 1> {log.out}
        """

rule concatAlleleCounts:
    input:
        [expand("output/{group}/alleleCounts/{group}_commonCounts.csv", group = key) for key in read1]
    output:
        'output/AI/alleleCountsMatrix.txt',
        'output/AI/colData.txt'
    params:
        donors = ",".join(samples['Donor'].unique().tolist()),
        conditions = ",".join(samples['Condition'].unique().tolist())
    log:
        out = "output/AI/logs/concatAlleleCounts.out"
    shell:
        """
        module load r/4.1.0
        mkdir -p output/AI/logs
        Rscript scripts/concatAlleleCounts.r {params.donors} {params.conditions} {input} 1> {log.out}
        """

rule getGenoHets:
    input:
        vcf = rules.VCFoverlapVariants.output,
        index = rules.VCFoverlapVariantsIndex.output
    output:
        'output/AI/genohets.csv'
    params:
        donorConversions = 'donors.txt'
    log:
        out = "output/AI/logs/genoHets.out"
    shell:
        """
        python3 scripts/genoHets.py {input.vcf} {params.donorConversions} 1> {log.out}
        """
